!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Cr	manager.cpp	/^void Manager::Cr(string x,Priority priority)$/;"	f	class:Manager
CreateProcess	manager.cpp	/^PCB* Manager::CreateProcess(int PID,Priority priority,string name)$/;"	f	class:Manager
De	manager.cpp	/^void Manager::De(string name)$/;"	f	class:Manager
DeleteProcess	resource.cpp	/^void RCB::DeleteProcess(int PID)$/;"	f	class:RCB
DestroyProcess	manager.cpp	/^void Manager::DestroyProcess(int PID)$/;"	f	class:Manager
Error	manager.cpp	/^void Manager::Error(int n)$/;"	f	class:Manager
FetchPCB	manager.cpp	/^PCB* Manager::FetchPCB(int pid)$/;"	f	class:Manager
FetchRCB	manager.cpp	/^RCB* Manager::FetchRCB(int rid)$/;"	f	class:Manager
FetchRCB	manager.cpp	/^RCB* Manager::FetchRCB(string name)$/;"	f	class:Manager
FileFlow	main.cpp	/^void FileFlow(Manager* manager)$/;"	f
HEADER_MANAGER	manager.h	2;"	d
HEADER_PRIORITY	priority.h	2;"	d
HEADER_PROCESS	process.h	2;"	d
HEADER_RESOURCE	resource.h	2;"	d
Init	manager.cpp	/^void Manager::Init()$/;"	f	class:Manager
InsertProcess	manager.cpp	/^void Manager::InsertProcess(Priority priority,PCB* pcb)$/;"	f	class:Manager
KillTree	process.cpp	/^void PCB::KillTree()$/;"	f	class:PCB
List	manager.cpp	/^void Manager::List(string option)$/;"	f	class:Manager
Manager	manager.h	/^class Manager$/;"	c
PCB	process.cpp	/^PCB::PCB(int PID,Priority priority)$/;"	f	class:PCB
PCB	process.h	/^class PCB$/;"	c
PID	process.h	/^        int PID;$/;"	m	class:PCB
PS	process.h	/^enum PS$/;"	g
Preempt	manager.cpp	/^void Manager::Preempt(PCB* p)$/;"	f	class:Manager
PrintString	manager.cpp	/^void Manager::PrintString(string s)$/;"	f	class:Manager
Priority	priority.h	/^ enum Priority$/;"	g
RCB	resource.h	/^        RCB(int n,int i){status = n;RID = i; k = n;}$/;"	f	class:RCB
RCB	resource.h	/^class RCB$/;"	c
RID	resource.h	/^        int RID;$/;"	m	class:RCB
RL	process.h	/^        list<PCB*> * RL; $/;"	m	class:PCB
Release	process.cpp	/^void PCB::Release(int rid)$/;"	f	class:PCB
Release	process.cpp	/^void PCB::Release(int rid,int n)$/;"	f	class:PCB
RemoveProcess	manager.cpp	/^void Manager::RemoveProcess(Priority priority,PCB* pcb)$/;"	f	class:Manager
Req	manager.cpp	/^void Manager::Req(string name,int n)$/;"	f	class:Manager
Request	process.cpp	/^void PCB::Request(int rid)$/;"	f	class:PCB
Request	process.cpp	/^void PCB::Request(int rid,int n)$/;"	f	class:PCB
Scheduler	manager.cpp	/^void Manager::Scheduler()$/;"	f	class:Manager
SwitchInOut	manager.cpp	/^bool Manager::SwitchInOut(string option)$/;"	f	class:Manager
TerminalFlow	main.cpp	/^void TerminalFlow(Manager* manager)$/;"	f
Time_out	manager.cpp	/^void Manager::Time_out()$/;"	f	class:Manager
To	manager.cpp	/^void Manager::To()$/;"	f	class:Manager
blockList	process.h	/^        RCB* blockList;$/;"	m	class:PCB
blocked	process.h	/^    blocked$/;"	e	enum:PS
children	process.h	/^        list<PCB* > children;$/;"	m	class:PCB
cpuState	process.h	/^        int cpuState;$/;"	m	class:PCB
getManager	process.h	/^        Manager* getManager(){return manager;}$/;"	f	class:PCB
getParent	process.h	/^        PCB* getParent(){return parent;}$/;"	f	class:PCB
getRID	resource.h	/^        int getRID(){return this->RID;}$/;"	f	class:RCB
getStatus	resource.h	/^        int getStatus(){return status;}$/;"	f	class:RCB
getWaitingList	resource.h	/^        list<pair<PCB*,int> > & getWaitingList(){return waitingList;}$/;"	f	class:RCB
in	manager.h	/^        ifstream in;$/;"	m	class:Manager
init	priority.h	/^    init,$/;"	e	enum:Priority
initList	manager.h	/^        list<PCB*> initList;$/;"	m	class:Manager
k	resource.h	/^        int k;$/;"	m	class:RCB
line	manager.h	/^        int line;$/;"	m	class:Manager
main	main.cpp	/^int main()$/;"	f
manager	process.h	/^        Manager* manager;$/;"	m	class:PCB
memory	process.h	/^        int memory;$/;"	m	class:PCB
name	process.h	/^        string name;$/;"	m	class:PCB
name	resource.h	/^        string name;$/;"	m	class:RCB
none	process.h	/^    none,$/;"	e	enum:PS
open_Files	process.h	/^        int open_Files;$/;"	m	class:PCB
out	manager.h	/^        ofstream out;$/;"	m	class:Manager
parent	process.h	/^        PCB* parent;$/;"	m	class:PCB
priority	process.h	/^        Priority priority;$/;"	m	class:PCB
processes	manager.h	/^        list<PCB*> processes;$/;"	m	class:Manager
ready	process.h	/^    ready,$/;"	e	enum:PS
readyList	process.h	/^        list<PCB*> * readyList;$/;"	m	class:PCB
releaseName	manager.h	/^        string releaseName;$/;"	m	class:Manager
resources	manager.h	/^        list<RCB*> resources;$/;"	m	class:Manager
resources	process.h	/^        map<RCB*,int> resources;$/;"	m	class:PCB
running	process.h	/^    running,$/;"	e	enum:PS
runningProcess	manager.h	/^        PCB* runningProcess;$/;"	m	class:Manager
setChildren	process.h	/^        void setChildren(PCB* children){this->children.push_back(children);}$/;"	f	class:PCB
setManager	process.h	/^        void setManager(Manager* manager){this->manager = manager;}$/;"	f	class:PCB
setParent	process.h	/^        void setParent(PCB* parent){this->parent = parent;}$/;"	f	class:PCB
setStatus	resource.h	/^        void setStatus(int status){this->status = status;}$/;"	f	class:RCB
status	resource.h	/^        int status;$/;"	m	class:RCB
systemList	manager.h	/^        list<PCB*> systemList;$/;"	m	class:Manager
system_	priority.h	/^    system_,$/;"	e	enum:Priority
terminal	manager.h	/^        bool terminal;$/;"	m	class:Manager
type	process.h	/^        PS type;$/;"	m	class:PCB
user	priority.h	/^    user,$/;"	e	enum:Priority
userList	manager.h	/^        list<PCB*> userList;$/;"	m	class:Manager
waitingList	resource.h	/^        list<pair<PCB*,int> > waitingList;$/;"	m	class:RCB
